--[[ -----------------------------------------------------------------------------------------------------------------
 File       : bind_trader.script (по материалам bind_monster.script CS/SOC)
 Description: Биндер Сидоровича
 Copyright  : 2004 © GSC Game World
 Author add	: Viнt@rь
 Last edit  : 23.10.2012
--]] -----------------------------------------------------------------------------------------------------------------
--/													Initialize Trader
--]] -----------------------------------------------------------------------------------------------------------------
function bind(oObj)
	oObj:bind_object(CTraderBinder(oObj))
end
--]] -----------------------------------------------------------------------------------------------------------------
--/							 						CLASS CONSTRUCTOR
--]] -----------------------------------------------------------------------------------------------------------------
class "CTraderBinder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function CTraderBinder:__init(obj) super(obj)
	self.loaded = false
end
----------------------------------------------------------------------------------------------------
function CTraderBinder:reload(sSection)
	object_binder.reload(self, sSection)
end
----------------------------------------------------------------------------------------------------
function CTraderBinder:reinit()
	object_binder.reinit(self)

	db.storage[self.object:id()] = {}
	self.st = db.storage[self.object:id()]
end
----------------------------------------------------------------------------------------------------
function CTraderBinder:net_spawn(sObj)
	if not object_binder.net_spawn(self, sObj) then
		return false
	end

	local on_offline_condlist = self.st and self.st.overrides and self.st.overrides.on_offline_condlist
	if on_offline_condlist ~= nil then
		xr_logic.pick_section_from_condlist(db.actor, self.object, on_offline_condlist)
	end

	if not self.object:alive() then
		return true
	end
	
	if alife():object(self.object:id()) == nil then
		return false
	end

	db.add_obj(self.object)
	if self.object:clsid() == clsid.script_trader then
		self.object:set_trader_global_anim("idle_spinka")
		smart_terrain.setup_gulag_and_logic_on_spawn(self.object, self.st, sObj, modules.stype_trader, self.loaded)
	end
	
	return true
end
----------------------------------------------------------------------------------------------------
function CTraderBinder:net_destroy()
	xr_sound.stop_sounds_by_id(self.object:id())

	if self.st and self.st.active_scheme then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy")
	end

	if db.offline_objects[self.object:id()] then
		db.offline_objects[self.object:id()].level_vertex_id = self.object:level_vertex_id()
		db.offline_objects[self.object:id()].active_section = self.st.active_section
	end

	db.del_obj(self.object)
	self.st = nil
	object_binder.net_destroy(self)
end
----------------------------------------------------------------------------------------------------------------------
--]] -----------------------------------------------------------------------------------------------------------------
--/							 							UPDATE
--]] -----------------------------------------------------------------------------------------------------------------
function CTraderBinder:update(delta)
	object_binder.update(self, delta)

	-- Апдейт торговли
	if self.object:clsid() == clsid.script_trader then
		trade_manager.update(self.object)
	end

	if self.st ~= nil and self.st.active_scheme ~= nil then
		xr_logic.try_switch_to_another_section(self.object, self.st[self.st.active_scheme], db.actor)
	end
	
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
end
----------------------------------------------------------------------------------------------------------------------
--]] -----------------------------------------------------------------------------------------------------------------
--/							 							SAVE/LOAD
--]] -----------------------------------------------------------------------------------------------------------------
function CTraderBinder:net_save_relevant()
	return true
end
----------------------------------------------------------------------------------------------------
function CTraderBinder:save(packet)
	set_save_marker(packet, "save", false, "trader_binder")
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.save(self.object, packet)
	end
	set_save_marker(packet, "save", true, "trader_binder")
end
----------------------------------------------------------------------------------------------------
function CTraderBinder:load(reader)
	self.loaded = true
	set_save_marker(reader, "load", false, "trader_binder")
	object_binder.load(self, reader)
	xr_logic.load_obj(self.object, reader)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.load(self.object, reader)
	end
	set_save_marker(reader, "load", true, "trader_binder")
end
----------------------------------------------------------------------------------------------------------------------