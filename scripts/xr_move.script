--[[ ----------------------------------------------------------------------------------------------- 
 File       : xr_move.script
 Description: ”ниверсальна€ схема - —хема движени€ к вертексу
 Copyright  : 2012 © GeJorge
 Author     : GeJorge
 Last edit  : 19.03.2012 (by Viнt@rь)
--]] -----------------------------------------------------------------------------------------------
--/											  Variables
--]] -----------------------------------------------------------------------------------------------
table_move_data={}
local depend_pos_x,depend_pos_z=0,0
local pursue_formations_cfg = {}
local pursue_formations_tbl = {
	around = {point_1 = {dir = vector():set(0.4,0,-0.8), dist = 2.2}, point_2 = {dir = vector():set(-0.4,0,-0.8), dist = 2.2}, 
			  point_3 = {dir = vector():set(1,0,0), dist = 2.0}, 	  point_4 = {dir = vector():set(-1,0,0), dist = 2.0}, 
			  point_5 = {dir = vector():set(0.4,0,0.8), dist = 2.2},  point_6 = {dir = vector():set(-0.4,0,0.8), dist = 2.2}
			 },
				 
	back   = {point_1 = {dir = vector():set(0.3,0,-1), dist = 2.2}, point_2 = {dir = vector():set(-0.3,0,-1), dist = 3.4}, 
			  point_3 = {dir = vector():set(0.3,0,-1), dist = 4.6}, point_4 = {dir = vector():set(-0.3,0,-1), dist = 5.8}, 
			  point_5 = {dir = vector():set(0.3,0,-1), dist = 7},   point_6 = {dir = vector():set(-0.3,0,-1), dist = 8.2}
		   	 },
			   
	line   = {point_1 = {dir = vector():set(-1,0,0), dist = 2.0}, point_2 = {dir = vector():set(-1,0,0), dist = 4.0}, 
			  point_3 = {dir = vector():set(-1,0,0), dist = 6.0}, point_4 = {dir = vector():set(1,0,0), dist = 2.0}, 
			  point_5 = {dir = vector():set(1,0,0), dist = 4.0},  point_6 = {dir = vector():set(1,0,0), dist = 6.0}
		   	 }
}
--]] -----------------------------------------------------------------------------------------------
--/											  Evaluators
--]] -----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
class "evaluator_move" (property_evaluator)
----------------------------------------------------------------------------------------------------------------------
function evaluator_move:__init(storage, name) super(nil, name)
   self.st = storage
end
function evaluator_move:evaluate()
   return xr_logic.is_active(self.object,self.st)
end

--]] -----------------------------------------------------------------------------------------------
--/											  Actions
--]] -----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
class "action_move" (action_base)
----------------------------------------------------------------------------------------------------------------------
function action_move:__init (npc, action_name, storage) super(nil, action_name)
	self.st = storage
	self.move_mgr = db.storage[npc:id()].move_mgr
end
function action_move:initialize()
	action_base.initialize(self)
	self.object:set_desired_position()
	self.object:set_desired_direction()
	self.object:clear_animations()
	self.object:set_detail_path_type(move.line)
	self.object:set_body_state(move.standing)
	self.object:set_movement_type(move.run)
	self.object:set_path_type(game_object.level_path)
	self.object:set_mental_state(anim.free)
	self.object:set_sight(look.danger, nil, 0)
	self.object:remove_all_restrictions()
	if exists(self.st.path_walk) or exists(self.st.path_look) then
		self:activate_path_manager()
	end
end
function action_move:activate_scheme(loading,npc)
	self.st.signals = {}
	self.st.switchs = {}
	self.st.patrol_signals = {}
	table_move_data[self.object:id()]={}
	table_move_data[self.object:id()].avail_speak_bool		= false
	table_move_data[self.object:id()].in_center_signalled	= false
	table_move_data[self.object:id()].in_center_action		= false
	table_move_data[self.object:id()].switch_init_bool		= false
	table_move_data[self.object:id()].switch_preparate_bool	= false
	table_move_data[self.object:id()].switch_fire_bool		= false
	table_move_data[self.object:id()].switch_end_bool		= false
	table_move_data[self.object:id()].switch_bool			= false
	for i=1,20 do
		table_move_data[self.object:id()]["patrol_path_"..i.."_bool"] = false
	end
	table_move_data[self.object:id()].patrol_path_sound_bool= false
	table_move_data[self.object:id()].haved_pursue			= false
	table_move_data[self.object:id()].insert_pursue			= false
	table_move_data[self.object:id()].move_vector			= vector():set(math.random()*6-3,0,math.random()*6-3)
	table_move_data[self.object:id()].move_vector:normalize()
	table_move_data[self.object:id()].shooter_vector		= vector():set(0,0,0)
	table_move_data[self.object:id()].shooter_vector:normalize()
	table_move_data[self.object:id().."move_stand_timer"]		= 0
	table_move_data[self.object:id().."move_pursue_timer"]		= 0
	table_move_data[self.object:id().."shooter_stage"]			= 0
	table_move_data[self.object:id().."shooter_delay_timer"]	= 0
	table_move_data[self.object:id().."shooter_launcher_timer"]	= 0
	table_move_data[self.object:id().."avail_speak_timer"]		= 0
	if exists(cfg_get_string(self.st.saved_ini,self.st.saved_section,"move_pursue_formation",nil)) and pursue_formations_cfg.section~=self.st.saved_section then
		pursue_formations_cfg.active  = false 
		pursue_formations_cfg.section = self.st.saved_section
		self:pursue_formation_refresh()
	end
	if exists(self.st.path_walk) or exists(self.st.path_look) then
		self:activate_path_manager()
	end
end
function action_move:activate_path_manager()
	if self.st.path_walk_info == nil then
		self.st.path_walk_info = utils.path_parse_waypoints(self.st.path_walk)
	end
	if self.st.path_look_info == nil then
		self.st.path_look_info = utils.path_parse_waypoints(self.st.path_look)
	end
	self.move_mgr:reset(self.st.path_walk,self.st.path_walk_info,self.st.path_look,self.st.path_look_info,self.st.team,self.st.suggested_state)
end
function action_move:position_riched()
   return self.move_mgr:arrived_to_first_waypoint()
end
function action_move:get_move_scheme_look(scheme_param)
	local l_table={}
	if exists(scheme_param.move_look_vertex) then
		l_table.look_position=level.vertex_position(scheme_param.move_look_vertex)
	elseif exists(scheme_param.move_look_subject) then
		if scheme_param.move_look_subject=="actor" then
			l_table.look_object=level.object_by_id(db.actor:id())
		elseif scheme_param.move_look_subject~="actor" and get_story_object_id(scheme_param.move_look_subject)~=nil then
			l_table.look_object=level.object_by_id(get_story_object_id(scheme_param.move_look_subject))
		else
			l_table=nil
		end
	else
		l_table=nil
	end
	return l_table
end
function action_move:get_pursue_scheme_look(scheme_param)
	local l_table={}
	if exists(scheme_param.move_pursue_look_vertex) then
		l_table.look_position=level.vertex_position(scheme_param.move_pursue_look_vertex)
	elseif exists(scheme_param.move_pursue_look_subject) then
		if scheme_param.move_pursue_look_subject=="actor" then
			l_table.look_object=level.object_by_id(db.actor:id())
		elseif scheme_param.move_pursue_look_subject~="actor" and get_story_object_id(scheme_param.move_pursue_look_subject)~=nil then
			l_table.look_object=level.object_by_id(get_story_object_id(scheme_param.move_pursue_look_subject))
		else
			l_table=nil
		end
	else
		l_table=nil
	end
	return l_table
end
function action_move:get_shooter_scheme_idle_target(scheme_param)
	local i_table={}
	if scheme_param.shooter_idle_look~=nil then
		if scheme_param.shooter_idle_look=="actor" then
			i_table.look_position=level.vertex_position(db.actor:level_vertex_id())
		else
			i_table.look_position=level.vertex_position(scheme_param.shooter_idle_look)
		end
	else
		i_table=nil
	end
	return i_table
end
function action_move:get_shooter_scheme_fire_target(scheme_param,npc)
	local f_table={}
	if scheme_param.shooter_fire_look~=nil then
		if scheme_param.shooter_fire_look~="actor" and scheme_param.shooter_fire_look~="enemy" then
			local fire_rnd1=scheme_param.shooter_fire_look_table[math.random(table.getn(scheme_param.shooter_fire_look_table))]
         	local fire_rnd2=scheme_param.shooter_fire_look_table[math.random(table.getn(scheme_param.shooter_fire_look_table))]
         	local fire_rnd3=scheme_param.shooter_fire_look_table[math.random(table.getn(scheme_param.shooter_fire_look_table))]
         	local main_rnd=math.random(1,3)
         	if scheme_param.fire_rnd_bool==false then
            	f_table.look_position=level.vertex_position(scheme_param.shooter_fire_look)
			else
				if main_rnd==1 then
					f_table.look_position=level.vertex_position(fire_rnd1)
				elseif main_rnd==2 then
					f_table.look_position=level.vertex_position(fire_rnd2)
				else
					f_table.look_position=level.vertex_position(fire_rnd3)
				end
			end
		elseif scheme_param.shooter_fire_look=="actor" then
			f_table.look_object=level.object_by_id(db.actor:id())
		elseif scheme_param.shooter_fire_look=="enemy" then
			if npc:best_enemy()~=nil then
				f_table.look_object=level.object_by_id(npc:best_enemy():id())
			else
				if scheme_param.shooter_ignore_actor=="false" then
					f_table.look_object=level.object_by_id(db.actor:id())
				else
					f_table.look_object=nil
				end
			end
		end
	else
		f_table=nil
	end
	return f_table
end
function action_move:pursue_formation_control(npc,target)
	if pursue_formations_cfg.active==nil then return end
   	if pursue_formations_cfg.active==false then
      	table_move_data[pursue_formations_cfg.section.."_formation"]={}
      	table_move_data[pursue_formations_cfg.section.."_formation"].is_active=false
      	table_move_data[pursue_formations_cfg.section.."_formation"].occupied_points=0
      	pursue_formations_cfg["members"]={}
      	pursue_formations_cfg.active=true
   	end
   	local scheme_param,scheme_section=table_move_data[npc:id()],table_move_data[pursue_formations_cfg.section.."_formation"]
   	if scheme_param.insert_pursue==false then
      	table.insert(pursue_formations_cfg["members"],npc:id())
      	scheme_param.insert_pursue=true
   	end
   	if scheme_section.is_active==false then scheme_section.is_active=true end
   	if scheme_section.pursue_target==nil then scheme_section.pursue_target=target end
   	if scheme_param.haved_pursue==false then
      	for i=1,get_table_lines(pursue_formations_tbl[scheme_param.move_pursue_formation]) do
         	if scheme_param.haved_pursue==false and (pursue_formations_cfg["occupied_point_"..i]==nil or pursue_formations_cfg["occupied_point_"..i]==false) then
            	scheme_section["pursue_member_"..i]={}
            	scheme_section["pursue_member_"..i].dir=pursue_formations_tbl[scheme_param.move_pursue_formation]["point_"..i].dir
            	scheme_section["pursue_member_"..i].dist=pursue_formations_tbl[scheme_param.move_pursue_formation]["point_"..i].dist
            	scheme_section.occupied_points=scheme_section.occupied_points+1
            	pursue_formations_cfg["occupied_point_"..i]=true
            	scheme_param.haved_pursue=i
         	end
      	end
   	end
   	if scheme_param.haved_pursue~=false then
      	local s_dir,s_dist=scheme_section["pursue_member_"..scheme_param.haved_pursue].dir,scheme_section["pursue_member_"..scheme_param.haved_pursue].dist
      	utils.send_to_nearest_accessible_vertex(npc,level.vertex_in_direction(scheme_section.pursue_target:level_vertex_id(),s_dir,s_dist))
   	end
end
function action_move:pursue_formation_refresh()
   	if pursue_formations_cfg.active==true then
      	for k,v in pairs(pursue_formations_cfg["members"]) do
         	if v~=nil then
            	table_move_data[v].haved_pursue=false
            	table_move_data[v].insert_pursue=false
            	for i=1,10 do
               		pursue_formations_cfg["occupied_point_"..i]=false
            	end
         	end
      	end
      	pursue_formations_cfg.active=false
   	end
   	pursue_formations_cfg["members"]={}
end
function action_move:approach_state_close(npc,action,scheme_param)
   	if action~=nil and scheme_param.approach_state_active==true then
      	execute_condlist(npc,self.st.saved_section,action)
      	scheme_param.approach_state_active=false
   	end
   	scheme_param.approach_state_active=false 
end
function action_move:approach_state_far(npc,action,scheme_param)
   	if action~=nil and scheme_param.approach_state_active==false then
      	execute_condlist(npc,self.st.saved_section,action)
      	scheme_param.approach_state_active=true
   	end
   	scheme_param.approach_state_active=true
end
function action_move:stage_avail_speak(npc,scheme_param,is_center)
   	local npc_id=npc:id()
   	if exists(scheme_param.move_avail_speak) and exists(scheme_param.move_avail_speak[1]) and (is_center==true or (is_center==false and scheme_param.move_avail_speak[3]=="true")) then
      	if dont_talk and table_move_data[npc_id.."avail_speak_timer"]~=0 then
         	table_move_data[npc_id.."avail_speak_timer"]=0
      	end
      	if table_move_data[npc_id.."avail_speak_timer"]~=0 then
         	if time_global()>=table_move_data[npc_id.."avail_speak_timer"] then
            	if scheme_param.move_avail_speak[4]=="false" and table_move_data[npc_id].avail_speak_bool==false then
               		if find_in_string(scheme_param.move_avail_speak[2],"=") or find_in_string(scheme_param.move_avail_speak[2],"+") or find_in_string(scheme_param.move_avail_speak[2],"-") then
                  		execute_condlist(npc,self.st.saved_section,scheme_param.move_avail_speak[2])
               		else
                  		play_theme_snd(npc,scheme_param.move_avail_speak[2])
               		end
               		table_move_data[npc_id].avail_speak_bool=true
            	elseif scheme_param.move_avail_speak[4]=="true" then
               		if find_in_string(scheme_param.move_avail_speak[2],"=") or find_in_string(scheme_param.move_avail_speak[2],"+") or find_in_string(scheme_param.move_avail_speak[2],"-") then
                  		execute_condlist(npc,self.st.saved_section,scheme_param.move_avail_speak[2])
               		else
                  		play_theme_snd(npc,scheme_param.move_avail_speak[2])
               		end
            	end
            	table_move_data[npc_id.."avail_speak_timer"]=0
         	end
      	else
         	table_move_data[npc_id.."avail_speak_timer"]=time_global()+(tonumber(scheme_param.move_avail_speak[1])*1000)
      	end
   	end
end
function action_move:stage_center_signalled(npc,scheme_param)
	local npc_id=npc:id()
	if scheme_param.in_center_signalled==false and (scheme_param.move_stand_time==nil or scheme_param.move_stand_time==0) then
		if exists(scheme_param.move_send_tip) and exists(scheme_param.move_send_tip[2]) then
			news_manager.send_tip(db.actor,scheme_param.move_send_tip[2],tonumber(scheme_param.move_send_tip[4]),scheme_param.move_send_tip[3],tonumber(scheme_param.move_send_tip[5]),nil,scheme_param.move_send_tip[1])
      	end
      	if exists(scheme_param.move_center_action) then
         	if scheme_param.in_center_action==false then
            	scheme_param.in_center_action=true
            	execute_condlist(npc,self.st.saved_section,scheme_param.move_center_action)
         	end
      	end
      	scheme_param.in_center_signalled=true
      	self.st.signals["on_center"]=true
   	elseif scheme_param.in_center_signalled==false and scheme_param.move_stand_time~=nil and scheme_param.move_stand_time~=0 then
      	if time_global()>table_move_data[npc_id.."move_stand_timer"] then
         	if exists(scheme_param.move_send_tip) and exists(scheme_param.move_send_tip[2]) then
            	news_manager.send_tip(db.actor,scheme_param.move_send_tip[2],tonumber(scheme_param.move_send_tip[4]),scheme_param.move_send_tip[3],tonumber(scheme_param.move_send_tip[5]),nil,scheme_param.move_send_tip[1])
         	end
         	if exists(scheme_param.move_center_action) then
            	if scheme_param.in_center_action==false then
               		scheme_param.in_center_action=true
               		execute_condlist(npc,self.st.saved_section,scheme_param.move_center_action)
            	end
         	end
         	scheme_param.in_center_signalled=true
         	self.st.signals["on_center"]=true
         	table_move_data[npc_id.."move_stand_timer"]=0
      	end
   	end
end
function action_move:execute()
   	action_base.execute(self)
   	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
      	return
   	end
   	if table_move_data[self.object:id()].update==nil then
      	self:check_logic_condlists(self.object,self.st.saved_ini,self.st.saved_section)
      	table_move_data[self.object:id()].update=time_global()+1000
   	end
   	if table_move_data[self.object:id()].update~=nil then
      	if time_global()>=table_move_data[self.object:id()].update then
         	table_move_data[self.object:id()].update=nil
      	end
   	end
   	if exists(self.st.path_walk) or exists(self.st.path_look) then
      	self.move_mgr:update()
      	return
   	end
   	local npc			 = self.object
   	local npc_id		 = npc:id()
   	local npc_name		 = npc:name()
   	local npc_pos		 = npc:level_vertex_id()
   	local npc_lv		 = npc:level_vertex_id()
   	local npc_profile	 = npc:profile_name()
   	local actor_pos		 = db.actor:position()
   	local actor_lv		 = db.actor:level_vertex_id()
   	local dont_talk		 = not npc:is_talking()
   	local scheme_param	 = table_move_data[npc_id]
   	local move_func		 = 0
   	local move_look		 = self:get_move_scheme_look(scheme_param)
   	local pursue_look        = self:get_pursue_scheme_look(scheme_param)
   	local shooter_victim = db.actor
   	local shooter_idle_look	   = self:get_shooter_scheme_idle_target(scheme_param)
   	local shooter_fire_look	   = self:get_shooter_scheme_fire_target(scheme_param,npc)
  	local shooter_clip_counter = read_obj_variable(npc,"shooter_clip_counter") or 0
   	local best_danger		= npc:best_danger()
	local danger_precond	= best_danger and (best_danger:type()==danger_object.grenade or best_danger:type()==danger_object.entity_attacked)
   	local npc_found_enemy	= npc:best_enemy()~=nil or danger_precond
   	local npc_without_enemy = npc:best_enemy()==nil and not danger_precond
   	if npc:best_enemy() then
      	shooter_victim = npc:best_enemy()
   	else
      	shooter_victim = db.actor
   	end
   	if scheme_param.move_pursue_actor=="true" then
      	move_func = 2
   	elseif exists(scheme_param.move_pursue_sid) then
      	move_func = 3
   	elseif scheme_param.move_free_behaviour=="true" then
      	move_func = 4
   	elseif exists(scheme_param.move_approach_actor) then
      	move_func = 1
	end
	if scheme_param.approach_info~=nil and scheme_param.approach_info[1]~=nil and scheme_param.approach_info[2]~=nil and dont_has_alife_info(scheme_param.approach_info[1]) then
    	local dist_type="<="
		if scheme_param.approach_info[3]~=nil then dist_type=scheme_param.approach_info[3] end
      	if dist_type=="<=" and distance_between(db.actor,npc)<=tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
      	elseif dist_type==">=" and distance_between(db.actor,npc)>=tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
      	elseif dist_type=="<" and distance_between(db.actor,npc)<tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
      	elseif dist_type==">" and distance_between(db.actor,npc)>tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
      	elseif dist_type=="=" and distance_between(db.actor,npc)==tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
      	end
   	end
	if scheme_param.approach_state~=nil and scheme_param.approach_state[1]~=nil and scheme_param.approach_state[2]~=nil then
      	local dist_type=">"
      	local execute_action_to_close=nil
      	local execute_action_to_far=nil
      	if scheme_param.approach_state[3]~=nil then dist_type=scheme_param.approach_state[3] end
      	if exists(scheme_param.approach_state[4]) then execute_action_to_close=scheme_param.approach_state[4] end
      	if exists(scheme_param.approach_state[5]) then execute_action_to_far=scheme_param.approach_state[5] end
      	if dist_type=="<=" and distance_between(db.actor,npc)<=tonumber(scheme_param.approach_state[2]) then set_state(npc,scheme_param.approach_state[1]) self:approach_state_far(npc,execute_action_to_far,scheme_param) return
      	elseif dist_type==">=" and distance_between(db.actor,npc)>=tonumber(scheme_param.approach_state[2]) then set_state(npc,scheme_param.approach_state[1]) self:approach_state_far(npc,execute_action_to_far,scheme_param) return
      	elseif dist_type=="<" and distance_between(db.actor,npc)<tonumber(scheme_param.approach_state[2]) then set_state(npc,scheme_param.approach_state[1]) self:approach_state_far(npc,execute_action_to_far,scheme_param) return
      	elseif dist_type==">" and distance_between(db.actor,npc)>tonumber(scheme_param.approach_state[2]) then set_state(npc,scheme_param.approach_state[1]) self:approach_state_far(npc,execute_action_to_far,scheme_param) return
      	elseif dist_type=="=" and distance_between(db.actor,npc)==tonumber(scheme_param.approach_state[2]) then set_state(npc,scheme_param.approach_state[1]) self:approach_state_far(npc,execute_action_to_far,scheme_param) return
      	end
      	self:approach_state_close(npc,execute_action_to_close,scheme_param)
   	end
	if scheme_param.move_stand_time~=nil and scheme_param.move_stand_time~=0 and table_move_data[npc_id.."move_stand_timer"]==0 then
      table_move_data[npc_id.."move_stand_timer"]=time_global()+scheme_param.move_stand_time
   	end
   	if table_move_data[npc_id.."shooter_launcher_timer"]~=0 then
      	if time_global()>=table_move_data[npc_id.."shooter_launcher_timer"] then
         	table_move_data[npc_id.."shooter_launcher_timer"]=0
      	end
   	end
   	if table_move_data[npc_id.."shooter_delay_timer"]~=0 and table_move_data[npc_id.."shooter_delay_timer"]~=1 then
      	if time_global()>=table_move_data[npc_id.."shooter_delay_timer"] then
         	table_move_data[npc_id.."shooter_delay_timer"]=1
      	end
   	end
   	if table_move_data[npc_id.."move_pursue_timer"]~=0 then
      	if time_global()>=table_move_data[npc_id.."move_pursue_timer"] then
         	table_move_data[npc_id.."move_pursue_timer"]=0
     	end
   	end
	--]] -----------------------------------------------------------------------------------------------
	--/									«ј√–”« ј ѕќƒ—’≈ћџ(главной): MOVE
	--]] -----------------------------------------------------------------------------------------------
   	if scheme_param.scheme_type=="move" then
      	if scheme_param.move_combat_disable=="true" or npc_without_enemy then
         	--/ƒвижение по точкам. √лавный режим.
         	if move_func==0 then
            	local dest_point=scheme_param.move_dest_number
            	if scheme_param.move_dest_actor=="true" then
               		dest_point=actor_lv
            	else
               		dest_point=scheme_param.move_dest_number
            	end
           		if scheme_param.move_dest_number==-1 then
               		dest_point=npc_lv
            	end
            	send_npc_to(npc,dest_point)
            	if npc_lv==dest_point or (scheme_param.move_avail_cond~=nil and scheme_param.move_avail_cond=="false") then
               		parse_info(scheme_param.move_center_info)
               		if move_look~=nil then 
                	  	set_state_with_look(npc,scheme_param.move_state_when_center,move_look,scheme_param.move_quick_animation)
               		else 
                  		set_state(npc,scheme_param.move_state_when_move,scheme_param.move_quick_animation)
               		end
               		npc_stop_on_talk(npc,scheme_param.move_stop_on_talk)
               		self:stage_avail_speak(npc,scheme_param,true)
               		self:stage_center_signalled(npc,scheme_param)
            	elseif npc_lv~=dest_point then
               		set_state(npc,scheme_param.move_state_when_move,scheme_param.move_quick_animation)
               		npc_stop_on_talk(npc,scheme_param.move_stop_on_talk)
               		set_npc_teleport_to_home_position(npc,dest_point,scheme_param.move_home_teleport)
               		self:stage_avail_speak(npc,scheme_param,false)
            	end
         	end
         	--/ѕриближение к √√. –ежим є1.
         	if move_func==1 then
           		local dest_point=actor_lv
            	send_npc_to(npc,dest_point)
            	if distance_between(db.actor,npc)<=tonumber(scheme_param.move_approach_actor) or (scheme_param.move_avail_cond~=nil and scheme_param.move_avail_cond=="false") then
               		parse_info(scheme_param.move_center_info)
               		set_state_to_actor(npc,scheme_param.move_state_when_center,true)
               		npc_stop_on_talk(npc,scheme_param.move_stop_on_talk)
               		self:stage_avail_speak(npc,scheme_param,true)
               		self:stage_center_signalled(npc,scheme_param)
            	elseif distance_between(db.actor,npc)>tonumber(scheme_param.move_approach_actor) then
               		set_state(npc,scheme_param.move_state_when_move,scheme_param.move_quick_animation)
               		npc_stop_on_talk(npc,scheme_param.move_stop_on_talk)
               		set_npc_teleport_to_home_position(npc,dest_point,scheme_param.move_home_teleport)
               		self:stage_avail_speak(npc,scheme_param,false)
            	end
         	end
         	--/—опровождение √√. –ежим є2.
         	if move_func==2 then
            	local pursue_range_min=tonumber(scheme_param.move_pursue_range[1])
            	local pursue_range_max=tonumber(scheme_param.move_pursue_range[2])
            	if exists(scheme_param.move_pursue_formation) then
               		self:pursue_formation_control(npc,db.actor)
            	else
               		send_npc_to(npc,actor_lv,scheme_param.move_vector)
           		end
            	if distance_between_safe(db.actor,npc)>pursue_range_max then
                  		set_state(npc,scheme_param.move_pursue_state_overtake,scheme_param.move_quick_animation)
            	elseif distance_between_safe(db.actor,npc)>=pursue_range_min and distance_between_safe(db.actor,npc)<=pursue_range_max then
                  		set_state(npc,scheme_param.move_pursue_state_move,scheme_param.move_quick_animation)
            	elseif distance_between_safe(db.actor,npc)<pursue_range_min then
               			if pursue_look~=nil then 
                	 	 	set_state_with_look(npc,scheme_param.move_pursue_state_stand,pursue_look,scheme_param.move_quick_animation)
               			else 
                  			set_state(npc,scheme_param.move_pursue_state_stand,scheme_param.move_quick_animation)
               			end
            	end
         	--/—опровождение цели по SID. –ежим є3.
         	elseif move_func==3 then
            	local pursue_target=scheme_param.move_pursue_sid[1]
            	local pursue_general=scheme_param.move_pursue_sid[2]
            	local pursue_range_min=tonumber(scheme_param.move_pursue_range[1])
            	local pursue_range_max=tonumber(scheme_param.move_pursue_range[2])
            	if get_story_object_id(pursue_target)~=nil and level.object_by_id(get_story_object_id(pursue_target))~=nil then
               		if exists(scheme_param.move_pursue_formation) then
                  		self:pursue_formation_control(npc,level.object_by_id(get_story_object_id(pursue_target)))
               		else
                 		send_npc_to(npc,level.object_by_id(get_story_object_id(pursue_target)):level_vertex_id(),scheme_param.move_vector)
               		end
               		if distance_between_safe(level.object_by_id(get_story_object_id(pursue_target)),npc)>pursue_range_max then
                  		if table_move_data[npc_id.."move_pursue_timer"]==0 then
                     		table_move_data[npc_id.."move_pursue_timer"]=time_global()+math.random(200,500)
                     		set_state(npc,scheme_param.move_pursue_state_overtake,scheme_param.move_quick_animation)
                  		end
               		elseif distance_between_safe(level.object_by_id(get_story_object_id(pursue_target)),npc)>=pursue_range_min and distance_between_safe(db.actor,npc)<=pursue_range_max then
                  		if table_move_data[npc_id.."move_pursue_timer"]==0 then
                     		table_move_data[npc_id.."move_pursue_timer"]=time_global()+math.random(200,500)
                     		if exists(pursue_general) and pursue_general=="true" and level.object_by_id(get_story_object_id(pursue_target)):alive() then
                        		local general_state=state_mgr.get_state(level.object_by_id(get_story_object_id(pursue_target)))
                        		set_state(npc,general_state,scheme_param.move_quick_animation)
                     		else
                        		set_state(npc,scheme_param.move_pursue_state_move,scheme_param.move_quick_animation)
                     		end
                  		end
               		elseif distance_between_safe(level.object_by_id(get_story_object_id(pursue_target)),npc)<pursue_range_min then
                  		if table_move_data[npc_id.."move_pursue_timer"]==0 then
                     		table_move_data[npc_id.."move_pursue_timer"]=time_global()+math.random(200,500)
                     		if exists(pursue_general) and pursue_general=="true" and level.object_by_id(get_story_object_id(pursue_target)):alive() then
                        		local general_state=state_mgr.get_state(level.object_by_id(get_story_object_id(pursue_target)))
                        		set_state(npc,general_state,scheme_param.move_quick_animation)
                     		else
                        		set_state(npc,scheme_param.move_pursue_state_stand,scheme_param.move_quick_animation)
                     		end
                  		end
               		end
            	else
               		set_state(npc,"hide",scheme_param.move_quick_animation)
            	end
			end
         	--/—вободное поведение. –ежим є4.
         	if move_func==4 then
             	if scheme_param.move_free_anim_c~=nil then
                	set_state(npc,scheme_param.move_free_anim_c,scheme_param.move_quick_animation)
             	elseif scheme_param.move_free_anim_m~=nil then
                	send_npc_to(npc,actor_lv)
                	set_state(npc,scheme_param.move_free_anim_m,scheme_param.move_quick_animation)
             	else
                	set_state(npc,"hide",scheme_param.move_quick_animation)
             	end
         	end
      	elseif scheme_param.move_combat_disable=="false" and npc_found_enemy then
         	set_state(npc,"idle",true)
      	end
   	end
	--]] -----------------------------------------------------------------------------------------------
	--/										«ј√–”« ј ѕќƒ—’≈ћџ: SHOOTER
	--]] -----------------------------------------------------------------------------------------------
   	if scheme_param.scheme_type=="shooter" then
      	--/ƒвижение к вектору/--
      	if scheme_param.shooter_pos~=0 then
         	send_npc_to(npc,scheme_param.shooter_pos,scheme_param.shooter_vector)
      	end
      	--/”становка состо€ний/--
      	if (table_move_data[npc_id.."shooter_stage"]==0 or npc_pos~=scheme_param.shooter_pos) and dont_talk then
         	if npc_pos~=scheme_param.shooter_pos then
            	set_state(npc,scheme_param.shooter_move_state,true)
            	if table_move_data[npc_id.."shooter_stage"]>0 then
               		table_move_data[npc_id.."shooter_stage"]=0
            	end
            	set_npc_teleport_to_home_position(npc,scheme_param.shooter_pos,scheme_param.shooter_home_teleport)
         	elseif npc_pos==scheme_param.shooter_pos then
            	if shooter_idle_look~=nil then
               		state_mgr.set_state(npc,scheme_param.shooter_idle_state,nil,nil,shooter_idle_look,{fast_set=true})
           		else
               		state_mgr.set_state(npc,scheme_param.shooter_idle_state,nil,nil,nil,{fast_set=true})
            	end
            	if table_move_data[npc_id.."shooter_stage"]==0 then
               		table_move_data[npc_id.."shooter_stage"]=1
            	end
         	end
         	save_stage(scheme_param.switch_init_bool,self.st.switchs,"stage_init")
      	end
      	--/ѕодготовка обстрела/--
      	if table_move_data[npc_id.."shooter_stage"]==1 and dont_talk then
         	if shooter_idle_look~=nil then
            	state_mgr.set_state(npc,scheme_param.shooter_idle_state,nil,nil,shooter_idle_look,{fast_set=true})
         	else
            	state_mgr.set_state(npc,scheme_param.shooter_idle_state,nil,nil,nil,{fast_set=true})
         	end
         	if scheme_param.shooter_avail_cond==nil then
            	if table_move_data[npc_id.."shooter_stage"]==1 and scheme_param.shooter_delay==0 then
               		table_move_data[npc_id.."shooter_stage"]=3
            	elseif table_move_data[npc_id.."shooter_stage"]==1 and scheme_param.shooter_delay~=0 then
               		table_move_data[npc_id.."shooter_delay_timer"]=time_global()+scheme_param.shooter_delay
               		table_move_data[npc_id.."shooter_stage"]=4
            	end
         	else
            	if scheme_param.shooter_avail_cond=="true" and scheme_param.shooter_delay==0 then
               		table_move_data[npc_id.."shooter_stage"]=3
            	elseif scheme_param.shooter_avail_cond=="true" and scheme_param.shooter_delay~=0 then
               		table_move_data[npc_id.."shooter_delay_timer"]=time_global()+scheme_param.shooter_delay
               		table_move_data[npc_id.."shooter_stage"]=4
            	end
         	end
         	save_stage(scheme_param.switch_preparate_bool,self.st.switchs,"stage_preparate")
      	end 
      	--/ќжидание по€влени€ цели/--
      	if scheme_param.shooter_need_see=="true" and table_move_data[npc_id.."shooter_stage"]==2 then
         	if shooter_idle_look~=nil then
            	state_mgr.set_state(npc,scheme_param.shooter_idle_state,nil,nil,shooter_idle_look,{fast_set=true})
         	else
            	state_mgr.set_state(npc,scheme_param.shooter_idle_state,nil,nil,nil,{fast_set=true})
         	end
         	if scheme_param.shooter_ignore_actor=="false" then
            	if npc:see(shooter_victim) and distance_between_safe(shooter_victim,npc)<scheme_param.shooter_need_dist then
               		table_move_data[npc_id.."shooter_stage"]=3
            	end
         	else
            	if npc:best_enemy()~=nil and npc:see(npc:best_enemy()) and distance_between_safe(npc:best_enemy(),npc)<scheme_param.shooter_need_dist then
               		table_move_data[npc_id.."shooter_stage"]=3
            	end
         	end
      	end
      	--/јктиваци€ обстрела/--
      	if table_move_data[npc_id.."shooter_stage"]==3 and dont_talk then
         	if scheme_param.shooter_need_see=="true" then
            	if scheme_param.shooter_ignore_actor=="false" and distance_between_safe(shooter_victim,npc)>=scheme_param.shooter_need_dist or not npc:see(shooter_victim) then
               		table_move_data[npc_id.."shooter_stage"]=2
            	elseif scheme_param.shooter_ignore_actor=="true" and ((npc:best_enemy()~=nil and (distance_between_safe(npc:best_enemy(),npc)>=scheme_param.shooter_need_dist or not npc:see(npc:best_enemy()))) or npc:best_enemy()==nil) then
               		table_move_data[npc_id.."shooter_stage"]=2
            	end
         	end
         	if read_obj_variable(npc,"shooter_clip_counter")==nil then write_obj_variable(npc,"shooter_clip_counter",0) end
         		if shooter_clip_counter~=nil then
            		if scheme_param.shooter_clip==-1 or shooter_clip_counter<scheme_param.shooter_clip then 
               			if scheme_param.shooter_type_wpn=="grenade_launcher" then
                  			if table_move_data[npc_id.."shooter_launcher_timer"]==0 then
                    			set_state_with_look(npc,scheme_param.shooter_fire_state,shooter_fire_look,true)
                     			if scheme_param.shooter_clip~=-1 and scheme_param.shooter_clip<1000 then
                        			if table_move_data[npc_id.."shooter_stage"]==3 then
                           				write_obj_variable(npc,"shooter_clip_counter",shooter_clip_counter+1)
                        			end
                     			end
                     			table_move_data[npc_id.."shooter_launcher_timer"]=time_global()+scheme_param.shooter_reload
                  			elseif table_move_data[npc_id.."shooter_launcher_timer"]>0 then
                     			set_state_with_look(npc,scheme_param.shooter_fire_state,shooter_fire_look,true)
                  			end
               			elseif scheme_param.shooter_type_wpn=="rifle" then
                  			if table_move_data[npc_id.."shooter_launcher_timer"]==0 then
                     			set_state_with_look(npc,scheme_param.shooter_fire_state,shooter_fire_look,true)
                     			if scheme_param.shooter_clip~=-1 and scheme_param.shooter_clip<1000 then
                        			if table_move_data[npc_id.."shooter_stage"]==3 then
                           				write_obj_variable(npc,"shooter_clip_counter",shooter_clip_counter+1)
                        			end
                     			end
                     			table_move_data[npc_id.."shooter_launcher_timer"]=time_global()+scheme_param.shooter_reload
                  			elseif table_move_data[npc_id.."shooter_launcher_timer"]>0 then
                     			set_state_with_look(npc,scheme_param.shooter_fire_state,shooter_fire_look,true)
                 			end
               			elseif scheme_param.shooter_type_wpn=="sniper" then
                  			if table_move_data[npc_id.."shooter_launcher_timer"]==0 then
                     			set_state_with_look(npc,scheme_param.shooter_fire_state,shooter_fire_look,true)
                     			if scheme_param.shooter_clip~=-1 and scheme_param.shooter_clip<1000 then
                        			if table_move_data[npc_id.."shooter_stage"]==3 then
                           				write_obj_variable(npc,"shooter_clip_counter",shooter_clip_counter+1)
                        			end
                     			end
                     			table_move_data[npc_id.."shooter_launcher_timer"]=time_global()+scheme_param.shooter_reload
                 			elseif table_move_data[npc_id.."shooter_launcher_timer"]>0 then
                     			set_state_with_look(npc,scheme_param.shooter_fire_state,shooter_fire_look,true)
                  			end
               			end
            		else
               			if table_move_data[npc_id.."shooter_stage"]==3 then
                  			table_move_data[npc_id.."shooter_stage"]=10
               			end
            		end
         		end
         		save_stage(scheme_param.switch_fire_bool,self.st.switchs,"stage_fire")
      		end 
      	--/«адержка/--
      	if table_move_data[npc_id.."shooter_stage"]==4 then
         	if table_move_data[npc_id.."shooter_delay_timer"]==1 then
            	table_move_data[npc_id.."shooter_stage"]=3
         	end
         	save_stage(scheme_param.switch_bool,self.st.switchs,"stage_delay")
      	end 
      	--/«авершение обстрела/--
      	if table_move_data[npc_id.."shooter_stage"]==10 and dont_talk then
         	set_state_with_look(npc,scheme_param.shooter_idle_state,shooter_idle_look,true)
         	execute_condlist(npc,self.st.saved_section,scheme_param.shooter_end_action)
         	save_stage(scheme_param.switch_end_bool,self.st.switchs,"stage_end")
         	table_move_data[npc_id.."shooter_stage"]=20
      	end
   	end
   	--]] -----------------------------------------------------------------------------------------------
	--/									«ј√–”« ј ѕќƒ—’≈ћџ: PATROL
	--]] -----------------------------------------------------------------------------------------------
   	if scheme_param.scheme_type=="patrol" then
      	local npc_lv=npc_lv
      	if read_obj_variable(npc,"currert_path")==nil then
         	write_obj_variable(npc,"currert_path",1)
         	write_obj_variable(npc,"currert_dest",scheme_param.patrol_path_1)
      	end
      	if read_obj_variable(npc,"currert_path")~=nil then
         	if scheme_param.patrol_no_reaction=="true" or npc_without_enemy then
              	send_npc_to(npc,read_obj_variable(npc,"currert_dest"))
              	if read_obj_variable(npc,"currert_path")==1 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_1_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,2,scheme_param,scheme_param.patrol_path_2,scheme_param.patrol_path_1_state,scheme_param.patrol_path_1_wait,scheme_param.patrol_path_1_look,scheme_param.patrol_path_1_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_1_info,scheme_param.patrol_path_1_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_1_bool,self.st.patrol_signals,"1")
                 	end
				elseif read_obj_variable(npc,"currert_path")==2 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_2_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
	                    self:setup_patrol_path(npc,3,scheme_param,scheme_param.patrol_path_3,scheme_param.patrol_path_2_state,scheme_param.patrol_path_2_wait,scheme_param.patrol_path_2_look,scheme_param.patrol_path_2_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_2_info,scheme_param.patrol_path_2_sound,scheme_param.patrol_quick_anim)
	                    save_stage(scheme_param.patrol_path_2_bool,self.st.patrol_signals,"2")
					end
				elseif read_obj_variable(npc,"currert_path")==3 then
					if npc_lv~=read_obj_variable(npc,"currert_dest") then
						set_state(npc,scheme_param.patrol_path_3_state,scheme_param.patrol_quick_anim)
						npc_stop_on_talk(npc)
						self:stage_avail_speak(npc,scheme_param,true)
					elseif npc_lv==read_obj_variable(npc,"currert_dest") then
						self:setup_patrol_path(npc,4,scheme_param,scheme_param.patrol_path_4,scheme_param.patrol_path_3_state,scheme_param.patrol_path_3_wait,scheme_param.patrol_path_3_look,scheme_param.patrol_path_3_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_3_info,scheme_param.patrol_path_3_sound,scheme_param.patrol_quick_anim)
						save_stage(scheme_param.patrol_path_3_bool,self.st.patrol_signals,"3")
					end
              	elseif read_obj_variable(npc,"currert_path")==4 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_4_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,5,scheme_param,scheme_param.patrol_path_5,scheme_param.patrol_path_4_state,scheme_param.patrol_path_4_wait,scheme_param.patrol_path_4_look,scheme_param.patrol_path_4_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_4_info,scheme_param.patrol_path_4_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_4_bool,self.st.patrol_signals,"4")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==5 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_5_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,6,scheme_param,scheme_param.patrol_path_6,scheme_param.patrol_path_5_state,scheme_param.patrol_path_5_wait,scheme_param.patrol_path_5_look,scheme_param.patrol_path_5_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_5_info,scheme_param.patrol_path_5_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_5_bool,self.st.patrol_signals,"5")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==6 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_6_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,7,scheme_param,scheme_param.patrol_path_7,scheme_param.patrol_path_6_state,scheme_param.patrol_path_6_wait,scheme_param.patrol_path_6_look,scheme_param.patrol_path_6_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_6_info,scheme_param.patrol_path_6_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_6_bool,self.st.patrol_signals,"6")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==7 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_7_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,8,scheme_param,scheme_param.patrol_path_8,scheme_param.patrol_path_7_state,scheme_param.patrol_path_7_wait,scheme_param.patrol_path_7_look,scheme_param.patrol_path_7_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_7_info,scheme_param.patrol_path_7_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_7_bool,self.st.patrol_signals,"7")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==8 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_8_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,9,scheme_param,scheme_param.patrol_path_9,scheme_param.patrol_path_8_state,scheme_param.patrol_path_8_wait,scheme_param.patrol_path_8_look,scheme_param.patrol_path_8_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_8_info,scheme_param.patrol_path_8_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_8_bool,self.st.patrol_signals,"8")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==9 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_9_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,10,scheme_param,scheme_param.patrol_path_10,scheme_param.patrol_path_9_state,scheme_param.patrol_path_9_wait,scheme_param.patrol_path_9_look,scheme_param.patrol_path_9_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_9_info,scheme_param.patrol_path_9_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_9_bool,self.st.patrol_signals,"9")
                	end
              	elseif read_obj_variable(npc,"currert_path")==10 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_10_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,11,scheme_param,scheme_param.patrol_path_11,scheme_param.patrol_path_10_state,scheme_param.patrol_path_10_wait,scheme_param.patrol_path_10_look,scheme_param.patrol_path_10_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_10_info,scheme_param.patrol_path_10_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_10_bool,self.st.patrol_signals,"10")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==11 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_11_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                   	 	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,12,scheme_param,scheme_param.patrol_path_12,scheme_param.patrol_path_11_state,scheme_param.patrol_path_11_wait,scheme_param.patrol_path_11_look,scheme_param.patrol_path_11_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_11_info,scheme_param.patrol_path_11_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_11_bool,self.st.patrol_signals,"11")
                	end
              	elseif read_obj_variable(npc,"currert_path")==12 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_12_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                   	 	self:setup_patrol_path(npc,13,scheme_param,scheme_param.patrol_path_13,scheme_param.patrol_path_12_state,scheme_param.patrol_path_12_wait,scheme_param.patrol_path_12_look,scheme_param.patrol_path_12_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_12_info,scheme_param.patrol_path_12_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_12_bool,self.st.patrol_signals,"12")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==13 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_13_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,14,scheme_param,scheme_param.patrol_path_14,scheme_param.patrol_path_13_state,scheme_param.patrol_path_13_wait,scheme_param.patrol_path_13_look,scheme_param.patrol_path_13_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_13_info,scheme_param.patrol_path_13_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_13_bool,self.st.patrol_signals,"13")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==14 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_14_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,15,scheme_param,scheme_param.patrol_path_15,scheme_param.patrol_path_14_state,scheme_param.patrol_path_14_wait,scheme_param.patrol_path_14_look,scheme_param.patrol_path_14_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_14_info,scheme_param.patrol_path_14_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_14_bool,self.st.patrol_signals,"14")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==15 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_15_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,16,scheme_param,scheme_param.patrol_path_16,scheme_param.patrol_path_15_state,scheme_param.patrol_path_15_wait,scheme_param.patrol_path_15_look,scheme_param.patrol_path_15_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_15_info,scheme_param.patrol_path_15_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_15_bool,self.st.patrol_signals,"15")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==16 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_16_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,17,scheme_param,scheme_param.patrol_path_17,scheme_param.patrol_path_16_state,scheme_param.patrol_path_16_wait,scheme_param.patrol_path_16_look,scheme_param.patrol_path_16_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_16_info,scheme_param.patrol_path_16_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_16_bool,self.st.patrol_signals,"16")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==17 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_17_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,18,scheme_param,scheme_param.patrol_path_18,scheme_param.patrol_path_17_state,scheme_param.patrol_path_17_wait,scheme_param.patrol_path_17_look,scheme_param.patrol_path_17_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_17_info,scheme_param.patrol_path_17_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_17_bool,self.st.patrol_signals,"17")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==18 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_18_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,19,scheme_param,scheme_param.patrol_path_19,scheme_param.patrol_path_18_state,scheme_param.patrol_path_18_wait,scheme_param.patrol_path_18_look,scheme_param.patrol_path_18_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_18_info,scheme_param.patrol_path_18_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_18_bool,self.st.patrol_signals,"18")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==19 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_19_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,20,scheme_param,scheme_param.patrol_path_20,scheme_param.patrol_path_19_state,scheme_param.patrol_path_19_wait,scheme_param.patrol_path_19_look,scheme_param.patrol_path_19_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_19_info,scheme_param.patrol_path_19_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_19_bool,self.st.patrol_signals,"19")
                 	end
              	elseif read_obj_variable(npc,"currert_path")==20 then
                 	if npc_lv~=read_obj_variable(npc,"currert_dest") then
                    	set_state(npc,scheme_param.patrol_path_20_state,scheme_param.patrol_quick_anim)
                    	npc_stop_on_talk(npc)
                    	self:stage_avail_speak(npc,scheme_param,true)
                 	elseif npc_lv==read_obj_variable(npc,"currert_dest") then
                    	self:setup_patrol_path(npc,21,scheme_param,scheme_param.patrol_path_21,scheme_param.patrol_path_20_state,scheme_param.patrol_path_20_wait,scheme_param.patrol_path_20_look,scheme_param.patrol_path_20_anim,scheme_param.patrol_count_path,scheme_param.patrol_path_20_info,scheme_param.patrol_path_20_sound,scheme_param.patrol_quick_anim)
                    	save_stage(scheme_param.patrol_path_20_bool,self.st.patrol_signals,"20")
                 	end
              	end
         	elseif scheme_param.patrol_no_reaction=="false" and npc_found_enemy then
              	set_state(npc,"idle",true)
         	end
      	end
   	end
   	--]] -----------------------------------------------------------------------------------------------
	--/									«ј√–”« ј ѕќƒ—’≈ћџ: DEPEND
	--]] -----------------------------------------------------------------------------------------------
   	if scheme_param.scheme_type=="depend" then
      	depend_pos_x=math.random(1,scheme_param.depend_holder)
      	depend_pos_z=math.random(1,scheme_param.depend_holder)
      	if scheme_param.depend_combat_disable=="true" or npc_without_enemy then
         	send_npc_to(npc,scheme_param.depend_home_point,depend_pos_x,0,depend_pos_z)
         	if npc_lv~=scheme_param.depend_home_point then
           		set_state(npc,scheme_param.depend_anim,true)
         	elseif npc_lv==scheme_param.depend_home_point then
            	set_state(npc,scheme_param.depend_anim,true)
         	end
      	elseif scheme_param.depend_combat_disable=="false" and npc_found_enemy then
         	set_state(npc,"idle",true)
      	end
   	end
end
function action_move:setup_patrol_path(victim,next_path,scheme_param,next_dest,need_body_state,currert_wait,currert_look,currert_anim,path_count,path_info,path_sound,quick_anim)
	self:stage_avail_speak(victim,scheme_param,true)   
	if path_count>=next_path then
		if currert_wait~=0 and read_obj_variable(victim,"currert_path_wait")==nil then
			write_obj_variable(victim,"currert_path_wait",time_global()+currert_wait)
		end
		if currert_wait~=0 then
			if exists(path_sound) and scheme_param.patrol_path_sound_bool==false then
				if find_in_string(path_sound,"characters_voice") then
					play_snd_at_pos(victim,path_sound)
				else
					play_theme_snd(victim,path_sound)
				end
				scheme_param.patrol_path_sound_bool=true
			end
			set_state_look_to(victim,currert_anim,currert_look)
			if read_obj_variable(victim,"currert_path_wait")~=nil and time_global()>read_obj_variable(victim,"currert_path_wait") then
				if exists(path_info) and dont_has_alife_info(path_info) then
					give_info(path_info)
				end
				write_obj_variable(victim,"currert_path",next_path)
				write_obj_variable(victim,"currert_dest",next_dest)
				clear_obj_variable(victim,"currert_path_wait")
				scheme_param.patrol_path_sound_bool=false
			end
		else
			if exists(path_info) and dont_has_alife_info(path_info) then
				give_info(path_info)
			end
			if exists(path_sound) and scheme_param.patrol_path_sound_bool==false then
				if find_in_string(path_sound,"characters_voice") then
					play_snd_at_pos(victim,path_sound)
				else
					play_theme_snd(victim,path_sound)
				end
				scheme_param.patrol_path_sound_bool=true
			end
			set_state(victim,need_body_state,quick_anim)
			npc_stop_on_talk(victim)
			write_obj_variable(victim,"currert_path",next_path)
			write_obj_variable(victim,"currert_dest",next_dest)
			clear_obj_variable(victim,"currert_path_wait")
			scheme_param.patrol_path_sound_bool=false
		end
	else
		if currert_look==nil or currert_look=="nil" then
			set_state(victim,need_body_state,quick_anim)
		else
			set_state_look_to(victim,currert_anim,currert_look)
		end
		npc_stop_on_talk(victim)
		if scheme_param.patrol_closed==nil or scheme_param.patrol_closed=="false" then
			if exists(path_info) and dont_has_alife_info(path_info) then
				give_info(path_info)
			end
			if exists(path_sound) and scheme_param.patrol_path_sound_bool==false then
				if find_in_string(path_sound,"characters_voice") then
					play_snd_at_pos(victim,path_sound)
				else
					play_theme_snd(victim,path_sound)
				end
				scheme_param.patrol_path_sound_bool=true
			end
			write_obj_variable(victim,"currert_path",1)
			write_obj_variable(victim,"currert_dest",scheme_param.patrol_path_1)
			scheme_param.patrol_path_sound_bool=false
		end
		clear_obj_variable(victim,"currert_path_wait")
	end
end
function action_move:check_logic_condlists(npc,ini,section)
	local scheme_param=table_move_data[npc:id()]
--/if scheme_param.section==nil or (scheme_param.section~=nil and scheme_param.section~=self.st.saved_section) then --/Ѕез посто€нного обновлени€.
--/   scheme_param.section = self.st.saved_section
	--\ќбщие команды\--
	scheme_param.scheme_type                = to_string(check_section_condlist(ini,section,"scheme_type","move"))                        --'“ип схемы.
	scheme_param.approach_info              = check_section_stick(ini,section,"approach_info",nil)                                       --'¬ыдача инфопортации на определЄнной дистанции (инфа|дистанци€|знак).
	scheme_param.approach_state             = check_section_stick(ini,section,"approach_state",nil)                                      --'ѕрименение анимации тела на определЄнных дистанци€х.
	--\ оманды: MOVE\--
	scheme_param.move_dest_number           = to_number(check_section_condlist(ini,section,"move_dest_number",0))                        --'»дти: к вертексу.
	scheme_param.move_dest_actor            = to_string(check_section_condlist(ini,section,"move_dest_actor","false"))                   --'»дти: к √√.
	scheme_param.move_avail_cond            = to_string(check_section_condlist(ini,section,"move_avail_cond",nil))                       --'”словие при котором Ќѕ— может идти.
	scheme_param.move_approach_actor        = to_number(check_section_condlist(ini,section,"move_approach_actor",nil))                   --'ѕриближатьс€ к √√. «начение параметра указывает дистанцию до √√, по преодолению которой Ќѕ— остановитс€. –ежим є1.
	scheme_param.move_look_subject          = to_string(check_section_condlist(ini,section,"move_look_subject",nil))                     --'—мотреть: на обьект.
	scheme_param.move_look_vertex           = to_string(check_section_condlist(ini,section,"move_look_vertex",nil))                      --'—мотреть: на вертекс.
	scheme_param.move_state_when_center     = to_string(check_section_condlist(ini,section,"move_state_when_center","guard"))            --'јнимаци€ тела по достижении пункта назначени€.
	scheme_param.move_state_when_move       = to_string(check_section_condlist(ini,section,"move_state_when_move","walk"))               --'јнимаци€ тела дл€ движени€ к пункту назначени€.
	scheme_param.move_stand_time            = to_number(check_section_condlist(ini,section,"move_stand_time",0))                         --'«адержка в пункте назначени€.
	scheme_param.move_pursue_actor          = to_string(check_section_condlist(ini,section,"move_pursue_actor","false"))                 --'ќхран€ть √√. –ежим є2.
	scheme_param.move_pursue_sid            = check_section_stick(ini,section,"move_pursue_sid",nil)                                     --'ќхран€ть SID объект (название_sid|использовать_ли_анимацию_sidа). –ежим є3.
 	if scheme_param.move_pursue_actor=="true" or exists(scheme_param.move_pursue_sid) then
		scheme_param.move_pursue_range       = check_section_stick(ini,section,"move_pursue_range","9|35")                                --'ƒистанции до SID при которых совершаютс€ изменени€ анимаций тела (мин.дистанци€|макс.дистанци€).
		scheme_param.move_pursue_formation   = to_string(check_section_condlist(ini,section,"move_pursue_formation",nil))
		scheme_param.move_pursue_state_stand = to_string(check_section_condlist(ini,section,"move_pursue_state_stand","hide"))            --'јнимаци€ тела по достижении цели охраны.
		scheme_param.move_pursue_state_move  = to_string(check_section_condlist(ini,section,"move_pursue_state_move","assault"))          --'јнимаци€ тела дл€ обычного движени€ к цели охраны.
		scheme_param.move_pursue_state_overtake = to_string(check_section_condlist(ini,section,"move_pursue_state_overtake","sprint"))    --'јнимаци€ тела дл€ ускоренного движени€ к цели охраны.
		scheme_param.move_pursue_look_subject = to_string(check_section_condlist(ini,section,"move_pursue_look_subject",nil))             --'—мотреть: на обьект.
		scheme_param.move_pursue_look_vertex  = to_string(check_section_condlist(ini,section,"move_pursue_look_vertex",nil))              --'—мотреть: на вертекс.
	end
	scheme_param.move_center_info           = to_string(check_section_condlist(ini,section,"move_center_info",nil))                      --'¬ыдать инфопортацию по достижении пункта назначени€.
	scheme_param.move_center_action         = to_string(cfg_get_string(ini,section,"move_center_action",nil))                            --'¬ыполнить действие {} %% по достижении пункта назначени€.
	scheme_param.move_combat_disable        = to_string(check_section_condlist(ini,section,"move_combat_disable","false"))               --'«апретить ли реакцию на раздражители.
	scheme_param.move_stop_on_talk          = to_string(check_section_condlist(ini,section,"move_stop_on_talk","false"))                 --'ќстанавливатьс€ при диалоге.
	scheme_param.move_free_behaviour        = to_string(check_section_condlist(ini,section,"move_free_behaviour","false"))               --'Ќѕ— находитс€ под схемой, но она его не использует. –ежим є4.
	if scheme_param.move_free_behaviour=="true" then
		scheme_param.move_free_anim_c        = to_string(check_section_condlist(ini,section,"move_free_anim_c",nil))                      --'јнимаци€ тела Ќѕ— сто€щего на месте.
		scheme_param.move_free_anim_m        = to_string(check_section_condlist(ini,section,"move_free_anim_m",nil))                      --'јнимаци€ тела Ќѕ— бегущего на место.
	end
	scheme_param.move_quick_animation       = to_string(check_section_condlist(ini,section,"move_quick_animation","true"))               --'Ѕыстро ли примен€ть анимацию тела.
	scheme_param.move_home_teleport         = to_string(check_section_condlist(ini,section,"move_home_teleport","false"))                --'“елепортаци€ в пункт назначени€, при отходе от него.
	scheme_param.move_send_tip              = check_section_stick(ini,section,"move_send_tip",nil)                                       --'¬ыдача сообщени€ (заголовок,текст,иконка,задержка,врем€_показа).
	scheme_param.move_avail_speak           = check_section_stick(ini,section,"move_avail_speak",nil)                                    --'¬оспроизведение звуковой схемы через определЄнный промежуток времени (промежуток_в_секундах|звукова€_схема|говорить_при_беге|посто€нно_говорить).
	--\ оманды: DEPEND\--
	if scheme_param.scheme_type=="depend" then
		scheme_param.depend_home_point       = to_number(check_section_condlist(ini,section,"depend_home_point",0))                       --'–абочий вертекс, в радиусе depend_holder от которого будет ходить Ќѕ—. 
		scheme_param.depend_holder           = to_number(check_section_condlist(ini,section,"depend_holder",15))                          --'–адиус рабочего вертекса.
		scheme_param.depend_anim             = to_string(check_section_condlist(ini,section,"depend_anim","walk"))                        --'јнимаци€ тела дл€ передвижени€ Ќѕ—.
		scheme_param.depend_combat_disable   = to_string(check_section_condlist(ini,section,"depend_combat_disable","false"))             --'«апретить ли реакцию на раздражители.
	end
	--\ оманды: SHOOTER\--
	if scheme_param.scheme_type=="shooter" then
		scheme_param.shooter_pos                = to_number(check_section_condlist(ini,section,"shooter_pos",0))                          --'–абоча€ позици€ Ќѕ—.
		scheme_param.shooter_fire_look          = to_string(cfg_get_string(ini,section,"shooter_fire_look",nil))                          --'÷ель-вертекс в режиме огн€.
		scheme_param.shooter_idle_look          = to_string(cfg_get_string(ini,section,"shooter_idle_look",nil))                          --'÷ель-вертекс в режиме прицеливани€.
		scheme_param.shooter_clip               = to_number(check_section_condlist(ini,section,"shooter_clip",0))                         --' оличество патронов или зар€дов у Ќѕ—. «начение -1 означает бесконечность.
		scheme_param.shooter_reload             = to_number(check_section_condlist(ini,section,"shooter_reload",0))                       --'¬рем€ между выстрелами.
		scheme_param.shooter_type_wpn           = to_string(check_section_condlist(ini,section,"shooter_type_wpn","grenade_launcher"))    --'“ип оружи€. ћожет быть: grenade_launcher, rifle, sniper.
		scheme_param.shooter_move_state         = to_string(check_section_condlist(ini,section,"shooter_move_state","patrol"))            --'јнимаци€ тела дл€ движени€ к назначенной позиции.
		scheme_param.shooter_idle_state         = to_string(check_section_condlist(ini,section,"shooter_idle_state","threat"))            --'јнимаци€ тела по достижении назначенной позиции, в режиме прицеливани€.
		scheme_param.shooter_fire_state         = to_string(check_section_condlist(ini,section,"shooter_fire_state","threat_fire"))       --'јнимаци€ тела по достижении назначенной позиции, в режиме огн€.
		scheme_param.shooter_delay              = to_number(check_section_condlist(ini,section,"shooter_delay",0))                        --'¬рем€ задержки перед началом прицеливани€.
		scheme_param.shooter_avail_cond         = to_string(check_section_condlist(ini,section,"shooter_avail_cond",nil))                 --'”словие входа в режим огн€.
		scheme_param.shooter_end_action         = to_string(check_section_condlist(ini,section,"shooter_end_action",nil))                 --'¬ыполнение действи€ {} %% после завершени€ обстрела.
		scheme_param.shooter_need_dist          = to_number(check_section_condlist(ini,section,"shooter_need_dist",80))                   --'ƒальность ведени€ огн€.
		scheme_param.shooter_need_see           = to_string(check_section_condlist(ini,section,"shooter_need_see","false"))               --'Ќеобходимо ли видеть цель, чтобы войти в режим огн€.
		scheme_param.shooter_ignore_actor       = to_string(check_section_condlist(ini,section,"shooter_ignore_actor","false"))           --'»гнорировать ли √√.
		scheme_param.shooter_home_teleport      = to_string(check_section_condlist(ini,section,"shooter_home_teleport","false"))          --'“елепортаци€ на рабочую позицию, при отходе от неЄ.
		if scheme_param.shooter_fire_look~=nil then
			scheme_param.shooter_fire_look_table=parse_names(scheme_param.shooter_fire_look)
			if find_in_string(scheme_param.shooter_fire_look,",") then
				scheme_param.fire_rnd_bool=true
			else
				scheme_param.fire_rnd_bool=false
			end
		end
	end
	--\ оманды: PATROL\--
	if scheme_param.scheme_type=="patrol" then
		scheme_param.patrol_count_path       = to_number(check_section_condlist(ini,section,"patrol_count_path",2))                       --' оличество точек в патрульном пути.
		scheme_param.patrol_countdown        = to_string(check_section_condlist(ini,section,"patrol_countdown","false"))                  --'ќбратный ли проход по точкам. Ќе с 1 по 20, а с 20 по 1.
		scheme_param.patrol_no_reaction      = to_string(check_section_condlist(ini,section,"patrol_no_reaction","false"))                --'«апретить ли реакцию на раздражители.
		scheme_param.patrol_closed           = to_string(check_section_condlist(ini,section,"patrol_closed","false"))                     --'«амкнутый ли патрульный путь.
		scheme_param.patrol_quick_anim       = to_string(check_section_condlist(ini,section,"patrol_quick_anim","true"))                  --'Ѕыстро ли примен€ть анимацию тела.
		if scheme_param.patrol_countdown=="true" then
			for i=1,20 do
				local i_c=21-i
				scheme_param["patrol_path_"..i_c]           = to_number(check_section_condlist(ini,section,"patrol_path_"..i_c,0))
				scheme_param["patrol_path_"..i_c.."_look"]  = to_string(check_section_condlist(ini,section,"patrol_path_"..i_c.."_look",nil))
				scheme_param["patrol_path_"..i_c.."_state"] = to_string(check_section_condlist(ini,section,"patrol_path_"..i_c.."_state","patrol"))
				scheme_param["patrol_path_"..i_c.."_anim"]  = to_string(check_section_condlist(ini,section,"patrol_path_"..i_c.."_anim","guard"))
				scheme_param["patrol_path_"..i_c.."_wait"]  = to_number(check_section_condlist(ini,section,"patrol_path_"..i_c.."_wait",0))
				scheme_param["patrol_path_"..i_c.."_info"]  = to_string(check_section_condlist(ini,section,"patrol_path_"..i_c.."_info",nil))
				scheme_param["patrol_path_"..i_c.."_sound"] = to_string(check_section_condlist(ini,section,"patrol_path_"..i_c.."_sound",nil))
			end
		else
			for i=1,20 do
				scheme_param["patrol_path_"..i]           = to_number(check_section_condlist(ini,section,"patrol_path_"..i,0))
				scheme_param["patrol_path_"..i.."_look"]  = to_string(check_section_condlist(ini,section,"patrol_path_"..i.."_look",nil))
  				scheme_param["patrol_path_"..i.."_state"] = to_string(check_section_condlist(ini,section,"patrol_path_"..i.."_state","patrol"))
				scheme_param["patrol_path_"..i.."_anim"]  = to_string(check_section_condlist(ini,section,"patrol_path_"..i.."_anim","guard"))
				scheme_param["patrol_path_"..i.."_wait"]  = to_number(check_section_condlist(ini,section,"patrol_path_"..i.."_wait",0))
				scheme_param["patrol_path_"..i.."_info"]  = to_string(check_section_condlist(ini,section,"patrol_path_"..i.."_info",nil))
				scheme_param["patrol_path_"..i.."_sound"] = to_string(check_section_condlist(ini,section,"patrol_path_"..i.."_sound",nil))
			end
		end
	end
end
function action_move:hit_callback(victim,amount,local_direction,killer,bone_index)
	local is_scheme_victim,is_scheme_killer=self.object:id()==victim:id(),self.object:id()==killer:id()
end
function action_move:death_callback(victim,killer)
	local is_scheme_victim,is_scheme_killer=self.object:id()==victim:id(),self.object:id()==killer:id()
	local scheme_param=table_move_data[self.object:id()]
	self:pursue_formation_refresh()
end
function action_move:use_callback(use_target,use_source)
	local is_scheme_use_target,is_scheme_use_source=self.object:id()==use_target:id(),self.object:id()==use_source:id()
end
function action_move:finalize()
	if exists(self.st.path_walk) or exists(self.st.path_look) then
		self.move_mgr:finalize()
	end
	action_base.finalize(self)
end

--]] -----------------------------------------------------------------------------------------------
--/										  BINDER
--]] -----------------------------------------------------------------------------------------------
move_action = xr_actions_id.zmey_actions+690
move_evaluator = stalker_ids.property_script+4570
function add_to_binder(npc, ini, scheme, section, storage)
	local operators={}
	local properties={}
	local manager=npc:motivation_action_manager()
	properties["event"]=xr_evaluators_id.reaction
	properties["need_move"]=move_evaluator+1
	properties["state_mgr_logic_active"]=xr_evaluators_id.state_mgr+4
	operators["action_move"]=move_action+1
	manager:add_evaluator(properties["need_move"],this.evaluator_move(storage, "move_need_move"))
	local new_action = this.action_move(npc, "action_move_activity", storage)
	new_action:add_precondition(world_property(stalker_ids.property_alive, true))
	new_action:add_precondition(world_property(stalker_ids.property_danger,false))
	new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
	new_action:add_precondition(world_property(stalker_ids.property_anomaly,false))
	new_action:add_precondition(world_property(properties["need_move"], true))
	xr_motivator.addCommonPrecondition(new_action)
	new_action:add_effect(world_property(properties["need_move"], false))
	new_action:add_effect (world_property(properties["state_mgr_logic_active"], false))
	manager:add_action(operators["action_move"], new_action)
	xr_logic.subscribe_action_for_events(npc, storage, new_action)
	new_action = manager:action(xr_actions_id.alife)
	new_action:add_precondition(world_property(properties["need_move"], false))
end
function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	st.saved_ini = ini
	st.saved_section = section
	st.path_walk = utils.cfg_get_string(ini,section,"path_walk",npc,false,gulag_name)
	st.path_look = utils.cfg_get_string(ini,section,"path_look",npc,false,gulag_name)
	if st.path_walk~=nil or st.path_look~=nil then
		st.team = utils.cfg_get_string(ini,section,"team",npc,false,gulag_name)
		st.suggested_state = {}
		st.suggested_state.standing = utils.cfg_get_string(ini,section,"def_state_standing",npc,false,"")
		st.suggested_state.moving  = utils.cfg_get_string(ini,section,"def_state_moving1",npc,false,"")
		st.suggested_state.moving  = utils.cfg_get_string(ini,section,"def_state_moving",npc,false,"",st.suggested_state.moving)
		st.path_walk_info = nil
		st.path_look_info = nil
	end
end
function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end

--]] -----------------------------------------------------------------------------------------------
--/											Functions
--]] -----------------------------------------------------------------------------------------------
function parse_info(info)
	if info~=nil and dont_has_alife_info(info) then
		give_info(info)
	end
end
function save_stage(bool,container,stage_name)
	if bool==false then
		bool=true
		container[stage_name]=true
	end
end
function to_string(val)
	if val==nil then
		return val
	end
	return tostring(val)
end
function to_number(val)
	if val==nil then
		return val
	end
	return tonumber(val)
end
function exists(val)
	return val~=nil and val~="nil"
end
function cfg_get_string(ini,section,line,def_val)
	return utils.cfg_get_string(ini,section,line,nil,false,"",def_val)
end
function cfg_get_number(ini,section,line,def_val)
	return utils.cfg_get_number(ini,section,line,nil,false,def_val)
end
function execute_condlist(npc,section,value)
	if npc==nil then npc=db.actor end
	xr_logic.pick_section_from_condlist(db.actor,npc,xr_logic.parse_condlist(nil,section,"condlist",value))
end
function check_section_condlist(ini,section,line,def_val,value_type)
	local d_value=""
	if def_val==nil then d_value="" else d_value=def_val end
	if value_type==nil or value_type=="string" then
		return xr_logic.pick_section_from_condlist(db.actor,db.actor,xr_logic.parse_condlist(nil,section,"condlist",cfg_get_string(ini,section,line,d_value)))
	elseif value_type=="number" then
		return xr_logic.pick_section_from_condlist(db.actor,db.actor,xr_logic.parse_condlist(nil,section,"condlist",cfg_get_number(ini,section,line,d_value)))
	end
end
function get_side_stick_value(string,value_num)
	local s_string
	if string~=nil then
		s_string=utils.parse_params(string)
	else
		s_string=nil
	end
	if value_num==nil or s_string==nil then
		return s_string
	else
		return s_string[to_number(value_num)]
	end
end
function check_section_stick(ini,section,line,def_val)
	local d_value=""
	if def_val==nil then d_value=nil else d_value=def_val end
	if ini==nil then
		return get_side_stick_value(section)
	end
	return get_side_stick_value(cfg_get_string(ini,section,line,d_value))
end
function set_state(npc,need_state,fast)
	if state_lib.states[need_state] then
		if state_mgr.get_state(npc)~=need_state and (fast==nil or fast==false or fast=="false") then
			state_mgr.set_state(npc,need_state)
		elseif state_mgr.get_state(npc)~=need_state and (fast==true or fast=="true") then
			state_mgr.set_state(npc,need_state,nil,nil,nil,{fast_set=true})
		end
	end
end
function set_state_with_look(npc,need_state,look,fast)
	if state_lib.states[need_state] then
		if state_mgr.get_state(npc)~=need_state and (fast==nil or fast==false or fast=="false") then
			state_mgr.set_state(npc,need_state,nil,nil,look)
		elseif state_mgr.get_state(npc)~=need_state and (fast==true or fast=="true") then
			state_mgr.set_state(npc,need_state,nil,nil,look,{fast_set=true})
		end
	end
end
function set_state_to_actor(npc,need_state,to_body)
	if state_lib.states[need_state] then
		if state_mgr.get_state(npc)~=need_state then
			if to_body==true then
				state_mgr.set_state(npc,need_state,nil,nil,{look_object=db.actor},{fast_set=true})
			else
				state_mgr.set_state(npc,need_state,nil,nil,{look_position=level.vertex_position(db.actor:level_vertex_id())},{fast_set=true})
			end
		end
	end
end
function set_state_look_to(npc,need_state,t_vertex)
	if state_lib.states[need_state] then
		if state_mgr.get_state(npc)~=need_state and (t_vertex=="nil" or t_vertex==0) then
			state_mgr.set_state(npc,need_state)
		elseif state_mgr.get_state(npc)~=need_state and (t_vertex~="nil" and t_vertex~=0) then
			state_mgr.set_state(npc,need_state,nil,nil,{look_position=level.vertex_position(t_vertex)},{fast_set=true})
		end
	end
end
function set_state_look_to_obj(npc,need_state,target_obj)
	if state_lib.states[need_state] then
		if state_mgr.get_state(npc)~=need_state and (target_obj==nil or target_obj=="nil") then
			state_mgr.set_state(npc,need_state)
		elseif state_mgr.get_state(npc)~=need_state and (t_vertex~="nil" and t_vertex~=0) then
			state_mgr.set_state(npc,need_state,nil,nil,{look_object=level.object_by_id(target_obj:id())},{fast_set=true})
		end
	end
end
function send_npc_to(obj,target,x,y,z)
	if x~=nil and y~=nil and z~=nil then
		utils.send_to_nearest_accessible_vertex(obj,level.vertex_in_direction(target,vector():set(x,y,z),5))
	elseif x~=nil and y==nil and z==nil then
		utils.send_to_nearest_accessible_vertex(obj,level.vertex_in_direction(target,x,5))
	else
		utils.send_to_nearest_accessible_vertex(obj,level.vertex_in_direction(target,vector():set(0,0,0),5))
	end
end
function set_npc_teleport_to_home_position(npc,home_pos,bool)
	if home_pos~=0 and (bool==nil or bool=="true") then
		local param1=level.vertex_position(home_pos).x
		local param2=level.vertex_position(home_pos).y
		local param3=level.vertex_position(home_pos).z
		npc:set_npc_position(vector():set(param1,param2,param3))
	end
end
function npc_stop_on_talk(npc,bool)
	if npc:is_talking() and (bool==nil or bool=="true") then
		if state_mgr.get_state(npc)~="wait_trade" then
			state_mgr.set_state(npc,"wait_trade",nil,nil,{look_object=db.actor},{fast_set=true})
		end
	end
end
function write_obj_variable(obj,params_name,value)
	if value==nil then
		clear_obj_variable(obj,params_name)
	else
		local opt=reload_params(params_name)
		pstor_store(obj,opt,value)
	end
end
function read_obj_variable(obj,params_name)
	local opt=reload_params(params_name)
	return pstor_retrieve(obj,opt)
end
function clear_obj_variable(obj,params_name,is_id)
	local obj_id
	if is_id==true then
		obj_id=obj
	else
		obj_id=obj:id()
	end
	local opt=reload_params(params_name)
	if db.storage[obj_id].pstor[opt] then
		db.storage[obj_id].pstor[opt]=nil
	end
end
function pstor_store(obj,varname,val)
	if obj==nil then return nil end
	local sub_id=obj:id()
	if db.storage[sub_id].pstor==nil then
		db.storage[sub_id].pstor={}
	end
	db.storage[sub_id].pstor[varname]=val
end
function pstor_retrieve(obj,varname)
	if obj==nil then return nil end
	local sub_id=obj:id()
	if db.storage[sub_id].pstor~=nil then
		local val=db.storage[sub_id].pstor[varname]
		if val~=nil then
			return val
		end
	end
	return nil
end
function reload_params(params)
	return params
end
function play_theme_snd(npc,snd)
	if npc==nil then npc=db.actor end
	xr_sound.set_sound_play(npc:id(),snd)
end
function play_folder_snd(sound,looped)
	local snd_souce
	if looped==nil then
		snd_souce=sound_object(sound)
		snd_souce:play(db.actor,0,sound_object.s2d)
	else
		snd_souce=sound_object(sound)
		if snd_souce:playing()==false then
			snd_souce:play(db.actor,0,sound_object.s2d+sound_object.looped)
		end
	end
end
function play_snd_at_pos(npc,sound,count1,count2)
	local snd_souce
	if count1==nil or count2==nil then
		snd_souce=sound_object(sound)
		snd_souce:play_at_pos(npc,npc:position(),0,sound_object.s3d)
	elseif count1~=nil and count2~=nil then
		local rnd_snd=math.random(count1,count2)
		snd_souce=sound_object(sound..rnd_snd)
		snd_souce:play_at_pos(npc,npc:position(),0,sound_object.s3d)
	end
end
function find_in_string(where,what)
	if where~=nil and what~=nil and string.find(where,what) then 
		return true
	elseif where==nil or what==nil then 
		return nil
	end
	return false
end
function find_out_string(where,what)
	if where~=nil and what~=nil and string.find(where,what) then 
		return false
	elseif where==nil or what==nil then 
		return nil
	end
	return true
end
function dont_has_alife_info(info_id)
	return not has_alife_info(info_id)
end